<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="Line Plot _Plotly__03207fc8-134a-4535-9179-668202956d78.xml">
<entry key="meta category" type="xstring" value="org.knime.js.base.node.viz.generic3.GenericJSViewNodeFactory"/>
<entry key="category" type="xstring" value="Plotly"/>
<entry key="name" type="xstring" value="Line Plot (Plotly)"/>
<entry key="description" type="xstring" value="%%00010This template provides the basis to create a %%00010Line Plot using the Plotly.js visualization %%00010Library. You can find more information about %%00010the available options at %%00010https://plot.ly/javascript/. %%00010%%00010Note: This template assumes that you have %%00010already sorted your data in descending order %%00010based on the X Axis column you select. If the %%00010plot does not appear linear, but instead lines %%00010go in multiple directions, try using the %%00010&quot;Sorter&quot; node to order your data based on the %%00010X Axis column used."/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="id" type="xstring" value="03207fc8-134a-4535-9179-668202956d78"/>
<config key="settings">
<entry key="hideInWizard" type="xboolean" value="false"/>
<entry key="generateView" type="xboolean" value="false"/>
<entry key="maxRows" type="xint" value="2500"/>
<entry key="jsCode" type="xstring" value="//This template assumes that you have already sorted your data%%00010//in descending order based on the X Axis column you select.%%00010//If the plot does not appear linear, but instead lines go in %%00010//multiple directions, try using the &quot;Sorter&quot; node to order %%00010//your data based on the X Axis column used.%%00010%%00010//Access the Knime Data Table provided by the node%%00010var dataTableRows = knimeDataTable.getRows(),%%00010    columnNames = knimeDataTable.getColumnNames();%%00010%%00010//Create the plotly HTML element %%00010var div = document.createElement('DIV');%%00010div.setAttribute('id', 'knime-line');%%00010document.body.append(div);%%00010%%00010//User defined settings%%00010//Column indicies are defined from left to right on the table%%00010//The first column has an index of 0, the second 1, etc.%%00010var xColInd = 0,                //Numeric Column Index, x-values%%00010    lineColInds = [1, 2, 3]     //Numeric Column Index, each column will%%00010                                //be represented as a line on the plot%%00010%%00010//Data collection%%00010var xData = [],%%00010    yData = [],%%00010    dataArray = [],%%00010    tableData = {},%%00010    totalMissing = 0;%%00010%%00010//Create our empty columns%%00010columnNames.forEach(function (columnName) {%%00010    tableData[columnName] = [];%%00010});%%00010%%00010//Pivot the data rows into data columns%%00010dataTableRows.forEach(function (row) {%%00010    var rowData = row.data;%%00010    rowData.forEach(function (dataCell, columnIndex) {%%00010        if (typeof dataCell === 'undefined' || dataCell === null) {%%00010            totalMissing++;%%00010        }%%00010        tableData[columnNames[columnIndex]].push(dataCell);%%00010    });%%00010});%%00010%%00010//Report on any missing values%%00010if (totalMissing &gt; 0) {%%00010    knimeService.setWarningMessage('There are ' + totalMissing + ' missing values in this dataset');%%00010}%%00010%%00010//Create our Line Objects to be plotted%%00010lineColInds.forEach(function (columnIndex) {%%00010%%00010    //Plotly data object for each line%%00010    var lineSettings = {%%00010        x: [],%%00010        y: [],%%00010        mode: 'lines', //change to 'lines+markers' to show points%%00010        type: 'scatter',%%00010        name: '',%%00010        marker: {%%00010            size: 1%%00010        },%%00010        line: {%%00010            width: 2%%00010        }%%00010    };%%00010%%00010    lineSettings.name = columnNames[columnIndex];%%00010    lineSettings.x = tableData[columnNames[xColInd]];%%00010    lineSettings.y = tableData[columnNames[columnIndex]];%%00010%%00010    dataArray.push(lineSettings);%%00010});%%00010%%00010//Plotly Config Options%%00010var config = {%%00010    toImageButtonOptions: {%%00010        format: 'svg', // one of png, svg, jpeg, webp%%00010        filename: 'custom_image',%%00010        height: 500,%%00010        width: 700,%%00010        scale: 1 // Multiply title/legend/axis/canvas sizes by this factor%%00010    },%%00010    displaylogo: false,%%00010    responsive: true,%%00010    editable: true,%%00010    scrollZoom: true%%00010}%%00010%%00010//Plotly Layout Options%%00010var layout = {%%00010    title: 'Knime Line Plot',%%00010    showlegend: true,%%00010    font: {%%00010        size: 12,%%00010        family: 'sans-serif'%%00010    },%%00010    xaxis: {%%00010        title: 'X Axis Name',%%00010        font: {%%00010            size: 12,%%00010            family: 'sans-serif'%%00010        },%%00010        type: 'linear',%%00010        showgrid: true%%00010    },%%00010    yaxis: {%%00010        title: 'Y Axis Name',%%00010        font: {%%00010            size: 12,%%00010            family: 'sans-serif'%%00010        },%%00010        type: 'linear',%%00010        showgrid: true%%00010    }%%00010}%%00010%%00010//Draw the plot%%00010Plotly.newPlot('knime-line', dataArray, layout, config);%%00010"/>
<entry key="jsSVGCode" type="xstring" value=""/>
<entry key="cssCode" type="xstring" value="#knime-line {%%00010%%00009width: 100%;%%00010%%00009height: 100vh;%%00010}"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="plotly.js-2.26.0"/>
</config>
<entry key="waitTime" type="xint" value="0"/>
<config key="outputVariables">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="customCSS" type="xstring" isnull="true" value=""/>
</config>
</config>
