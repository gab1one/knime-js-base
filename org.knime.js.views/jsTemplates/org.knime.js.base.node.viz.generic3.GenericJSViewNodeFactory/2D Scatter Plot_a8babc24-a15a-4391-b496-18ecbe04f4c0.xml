<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="2D Scatter Plot _Plotly__44b67e10-dfd5-4e7c-86f5-69d6894bf7c2.xml">
<entry key="meta category" type="xstring" value="org.knime.js.base.node.viz.generic3.GenericJSViewNodeFactory"/>
<entry key="category" type="xstring" value="Plotly"/>
<entry key="name" type="xstring" value="2D Scatter Plot (Plotly)"/>
<entry key="description" type="xstring" value="%%00010This template provides the basis to create %%00010a 2-Dimensional Scatter Plot using the %%00010Plotly.js visualization Library. You can find %%00010more information about the available options %%00010at https://plot.ly/javascript/."/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="id" type="xstring" value="44b67e10-dfd5-4e7c-86f5-69d6894bf7c2"/>
<config key="settings">
<entry key="hideInWizard" type="xboolean" value="false"/>
<entry key="generateView" type="xboolean" value="false"/>
<entry key="maxRows" type="xint" value="2500"/>
<entry key="jsCode" type="xstring" value="%%00010//Access the Knime Data Table provided by the node%%00010var dataTableRows = knimeDataTable.getRows(),%%00010    knimeRowColors = knimeDataTable.getRowColors(),%%00010    columnNames = knimeDataTable.getColumnNames();%%00010%%00010//Create the plotly HTML element %%00010var div = document.createElement('DIV');%%00010div.setAttribute('id', 'knime-scatter');%%00010document.body.append(div);%%00010%%00010//User defined settings%%00010//Column indicies are defined from left to right on the table%%00010//The first column has an index of 0, the second 1, etc.%%00010var xColInd = 0,    //Numeric Column Index, x-values%%00010    yColInd = 1,    //Numeric Column Index, y-values%%00010    groupByColInd = 4;  //String Column Index, to create groups, OPTIONAL%%00010%%00010//Data collection%%00010var xData = [],%%00010    yData = [],%%00010    dataArray = [];%%00010%%00010//Data preparation%%00010dataTableRows.forEach(function (row, rowInd) {%%00010%%00010    //Plotly data object for each group%%00010    var groupSettings = {%%00010        x: [],%%00010        y: [],%%00010        mode: 'markers',%%00010        type: 'scatter',%%00010        name: '',%%00010        marker: {%%00010            size: [],%%00010            color: []%%00010        },%%00010        id: []%%00010    };%%00010%%00010    var group = groupByColInd &gt; -1 ? row.data[groupByColInd] : '';%%00010    var gInd = -1;%%00010%%00010    for (var j = 0; j &lt; dataArray.length; j++) {%%00010        if (dataArray[j].name === group) {%%00010            gInd = j;%%00010            break;%%00010        }%%00010    }%%00010%%00010    if (gInd &lt; 0) {%%00010        groupSettings.name = group;%%00010        gInd = dataArray.push(groupSettings) - 1;%%00010    }%%00010%%00010    dataArray[gInd].x.push(row.data[xColInd]);%%00010    dataArray[gInd].y.push(row.data[yColInd]);%%00010    dataArray[gInd].id.push(row.rowKey);%%00010%%00010    //color settings%%00010    if (knimeRowColors.length &gt; rowInd) {%%00010        dataArray[gInd].marker.color.push(knimeRowColors[rowInd]);%%00010    }%%00010%%00010    //size settings%%00010    var seed = gInd * 3;%%00010    var size = seed &gt; 5 ? seed + 3 : seed + 5;%%00010    dataArray[gInd].marker.size = size;%%00010});%%00010%%00010//Plotly Config Options%%00010var config = {%%00010    toImageButtonOptions: {%%00010        format: 'svg', // one of png, svg, jpeg, webp%%00010        filename: 'custom_image',%%00010        height: 500,%%00010        width: 700,%%00010        scale: 1 // Multiply title/legend/axis/canvas sizes by this factor%%00010    },%%00010    displaylogo: false,%%00010    responsive: true,%%00010    editable: true,%%00010    scrollZoom: true%%00010}%%00010%%00010//Plotly Layout Options%%00010var layout = {%%00010    title: 'Knime 2D Scatter Plot',%%00010    showlegend: true,%%00010    font: {%%00010        size: 12,%%00010        family: 'sans-serif'%%00010    },%%00010    xaxis: {%%00010        title: columnNames[xColInd],%%00010        font: {%%00010            size: 12,%%00010            family: 'sans-serif'%%00010        },%%00010        type: 'linear',%%00010        showgrid: true%%00010    },%%00010    yaxis: {%%00010        title: columnNames[yColInd],%%00010        font: {%%00010            size: 12,%%00010            family: 'sans-serif'%%00010        },%%00010        type: 'linear',%%00010        showgrid: true%%00010    }%%00010}%%00010%%00010//Draw the plot%%00010Plotly.newPlot('knime-scatter', dataArray, layout, config);%%00010%%00010//Knime selection event publishing; selection events%%00010document.getElementById('knime-scatter').on('plotly_selected', function (eventData) {%%00010    if (!eventData) {%%00010        return;%%00010    }%%00010%%00010    var selection = [];%%00010%%00010    eventData.points.forEach(function (pt) {%%00010        selection.push(pt.data.id[pt.pointIndex]);%%00010    });%%00010%%00010    knimeService.setSelectedRows(knimeDataTable.getTableId(), selection);%%00010});%%00010%%00010//Knime selection event publishing; de-selection events%%00010document.getElementById('knime-scatter').on('plotly_deselect', function () {%%00010    knimeService.setSelectedRows(knimeDataTable.getTableId(), []);%%00010});"/>
<entry key="jsSVGCode" type="xstring" value=""/>
<entry key="cssCode" type="xstring" value="#knime-scatter {%%00010%%00009width: 100%;%%00010%%00009height: 100vh;%%00010}"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="plotly.js-2.35.2"/>
</config>
<entry key="waitTime" type="xint" value="0"/>
<config key="outputVariables">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="customCSS" type="xstring" isnull="true" value=""/>
</config>
</config>
